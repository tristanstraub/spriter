{"name":"Spriter","tagline":"CSS sprite sheet generator","body":"### CSS Sprites Made Simple.\r\n\r\nSpriter analyzes your existing CSS files and either generates highly optimized sprite sheets using a [growing binary tree bin-packing algorithm](http://codeincomplete.com/posts/2011/5/7/bin_packing) or inlines them using [data URIs](http://en.wikipedia.org/wiki/Data_URI_scheme#CSS) and outputs an updated CSS stylesheet.\r\n\r\nIt even groups your [retina](http://work.no/lib/images/generated/sprites/base@2x.png) and [non-retina](http://work.no/lib/images/generated/sprites/base@2x.png) images into separate sprite sheets to reduce load times.\r\n\r\n#### No strings attached\r\nInstead of relying on a specific [framework](http://compass-style.org) or [build system](http://gruntjs.com) Spriter will work with anything that outputs or processes a CSS file.\r\n\r\n### Installation\r\n\r\n    $ npm install spriter\r\n\r\n### Usage\r\n\r\n    $ spriter [options] [file]\r\n\r\n### Options\r\n    -s, --source <path>      source path relative to input (required when stdin is used)\r\n    -t, --target <path>      target path relative to source path (required unless generating inline)\r\n    -f, --filter <path>      source url filter (e.g: images/sprites)\r\n    -i, --inline             inline sprites as data URIs\r\n    -O, --no-optimization    disable rule optimization\r\n    -h, --help               output usage information\r\n    -V, --version            output the version number\r\n\r\n### Examples\r\n\r\n#### Generating a sprite sheet from an existing CSS file:\r\n\r\n    $ spriter --target images/sprites.png main.css > main.sprited.css\r\n    \r\nIf Spriter finds any retina resolution images it will generate a separate sprite sheet for those images (in this example `Ã­mages/sprites@2x.png`)\r\n    \r\n#### Using Spriter with [SASS](http://sass-lang.com):\r\n\r\n    $ sass css/main.scss | spriter --source css --target images/sprites.png > main.css\r\n    \r\nThe `--source` option tells Spriter how to translate URLs into file system paths when reading images.\r\n\r\nIn this example the resulting sprite would be generated at `css/images/sprites.png`.\r\n\r\n#### Only include images in a specific location:\r\n\r\n    $ spriter --target images/home-sprites.png --filter images/home/ main.css > main.sprited.css\r\n\r\nThis is handy for multi-page sites where you want to group sprite sheets by page or similar.\r\n\r\n#### Inline images in resulting CSS using [data URIs](http://en.wikipedia.org/wiki/Data_URI_scheme#CSS)\r\n\r\n    $ spriter --filter images/sprites/icons/ --inline main.css > main.sprited.css\r\n\r\n### Rule optimization\r\n\r\nSpriter will by default convert multi-declaration backgrounds to a single short-hand within the same rule:\r\n\r\n```css\r\n.circle {\r\n    background: url(images/generated/sprites.png) no-repeat;\r\n    background-position: -50px 0;\r\n    background-color: #ccc;\r\n    background-size: 100px auto\r\n}\r\n```\r\n\r\nbecomes:\r\n\r\n```css\r\n.circle {\r\n    background: #ccc url(images/generated/sprites.png) -50px 0 100px auto no-repeat\r\n}\r\n```\r\n\r\nOptimization can be disabled by supplying the `-O/--no-optimization` flag.\r\n\r\n\r\n### API\r\n\r\n    var spriter = require('spriter')\r\n    \r\n    spriter(string, sourcePath, targetPath, optimize, inline)\r\n\r\n\r\n### License\r\n\r\n[MIT](http://en.wikipedia.org/wiki/MIT_License)","google":"UA-21248447-15","note":"Don't delete this file! It's used internally to help with page regeneration."}